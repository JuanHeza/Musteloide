import {
  forkBlur,
  forkFocus,
  isFocusVisible
} from "./chunk-T5NUF77S.js";
import {
  getOverrides,
  mergeOverride,
  styled,
  toObjectOverride,
  useStyletron
} from "./chunk-RR725WED.js";
import {
  require_react_dom
} from "./chunk-KXTM2JPT.js";
import {
  require_react
} from "./chunk-IGOAJGOA.js";
import {
  __commonJS,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/invariant/browser.js
var require_browser = __commonJS({
  "node_modules/invariant/browser.js"(exports, module) {
    "use strict";
    var invariant = function(condition, format, a, b, c, d, e, f) {
      if (true) {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    };
    module.exports = invariant;
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning;
  }
});

// node_modules/react-input-mask/lib/react-input-mask.development.js
var require_react_input_mask_development = __commonJS({
  "node_modules/react-input-mask/lib/react-input-mask.development.js"(exports, module) {
    "use strict";
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React10 = _interopDefault(require_react());
    var reactDom = require_react_dom();
    var invariant = _interopDefault(require_browser());
    var warning = _interopDefault(require_warning());
    function _defaults2(obj, defaults) {
      var keys = Object.getOwnPropertyNames(defaults);
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = Object.getOwnPropertyDescriptor(defaults, key);
        if (value && value.configurable && obj[key] === void 0) {
          Object.defineProperty(obj, key, value);
        }
      }
      return obj;
    }
    function _extends8() {
      _extends8 = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends8.apply(this, arguments);
    }
    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      _defaults2(subClass, superClass);
    }
    function _objectWithoutPropertiesLoose8(source, excluded) {
      if (source == null)
        return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0)
          continue;
        target[key] = source[key];
      }
      return target;
    }
    function _assertThisInitialized4(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }
    function setInputSelection(input, start, end) {
      if ("selectionStart" in input && "selectionEnd" in input) {
        input.selectionStart = start;
        input.selectionEnd = end;
      } else {
        var range = input.createTextRange();
        range.collapse(true);
        range.moveStart("character", start);
        range.moveEnd("character", end - start);
        range.select();
      }
    }
    function getInputSelection(input) {
      var start = 0;
      var end = 0;
      if ("selectionStart" in input && "selectionEnd" in input) {
        start = input.selectionStart;
        end = input.selectionEnd;
      } else {
        var range = document.selection.createRange();
        if (range.parentElement() === input) {
          start = -range.moveStart("character", -input.value.length);
          end = -range.moveEnd("character", -input.value.length);
        }
      }
      return {
        start,
        end,
        length: end - start
      };
    }
    var defaultFormatChars = {
      "9": "[0-9]",
      "a": "[A-Za-z]",
      "*": "[A-Za-z0-9]"
    };
    var defaultMaskChar = "_";
    function parseMask(mask, maskChar, formatChars) {
      var parsedMaskString = "";
      var prefix = "";
      var lastEditablePosition = null;
      var permanents = [];
      if (maskChar === void 0) {
        maskChar = defaultMaskChar;
      }
      if (formatChars == null) {
        formatChars = defaultFormatChars;
      }
      if (!mask || typeof mask !== "string") {
        return {
          maskChar,
          formatChars,
          mask: null,
          prefix: null,
          lastEditablePosition: null,
          permanents: []
        };
      }
      var isPermanent = false;
      mask.split("").forEach(function(character) {
        if (!isPermanent && character === "\\") {
          isPermanent = true;
        } else {
          if (isPermanent || !formatChars[character]) {
            permanents.push(parsedMaskString.length);
            if (parsedMaskString.length === permanents.length - 1) {
              prefix += character;
            }
          } else {
            lastEditablePosition = parsedMaskString.length + 1;
          }
          parsedMaskString += character;
          isPermanent = false;
        }
      });
      return {
        maskChar,
        formatChars,
        prefix,
        mask: parsedMaskString,
        lastEditablePosition,
        permanents
      };
    }
    function isPermanentCharacter(maskOptions, pos) {
      return maskOptions.permanents.indexOf(pos) !== -1;
    }
    function isAllowedCharacter(maskOptions, pos, character) {
      var mask = maskOptions.mask, formatChars = maskOptions.formatChars;
      if (!character) {
        return false;
      }
      if (isPermanentCharacter(maskOptions, pos)) {
        return mask[pos] === character;
      }
      var ruleChar = mask[pos];
      var charRule = formatChars[ruleChar];
      return new RegExp(charRule).test(character);
    }
    function isEmpty(maskOptions, value) {
      return value.split("").every(function(character, i) {
        return isPermanentCharacter(maskOptions, i) || !isAllowedCharacter(maskOptions, i, character);
      });
    }
    function getFilledLength(maskOptions, value) {
      var maskChar = maskOptions.maskChar, prefix = maskOptions.prefix;
      if (!maskChar) {
        while (value.length > prefix.length && isPermanentCharacter(maskOptions, value.length - 1)) {
          value = value.slice(0, value.length - 1);
        }
        return value.length;
      }
      var filledLength = prefix.length;
      for (var i = value.length; i >= prefix.length; i--) {
        var character = value[i];
        var isEnteredCharacter = !isPermanentCharacter(maskOptions, i) && isAllowedCharacter(maskOptions, i, character);
        if (isEnteredCharacter) {
          filledLength = i + 1;
          break;
        }
      }
      return filledLength;
    }
    function isFilled(maskOptions, value) {
      return getFilledLength(maskOptions, value) === maskOptions.mask.length;
    }
    function formatValue(maskOptions, value) {
      var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix = maskOptions.prefix;
      if (!maskChar) {
        value = insertString(maskOptions, "", value, 0);
        if (value.length < prefix.length) {
          value = prefix;
        }
        while (value.length < mask.length && isPermanentCharacter(maskOptions, value.length)) {
          value += mask[value.length];
        }
        return value;
      }
      if (value) {
        var emptyValue = formatValue(maskOptions, "");
        return insertString(maskOptions, emptyValue, value, 0);
      }
      for (var i = 0; i < mask.length; i++) {
        if (isPermanentCharacter(maskOptions, i)) {
          value += mask[i];
        } else {
          value += maskChar;
        }
      }
      return value;
    }
    function clearRange(maskOptions, value, start, len) {
      var end = start + len;
      var maskChar = maskOptions.maskChar, mask = maskOptions.mask, prefix = maskOptions.prefix;
      var arrayValue = value.split("");
      if (!maskChar) {
        for (var i = end; i < arrayValue.length; i++) {
          if (isPermanentCharacter(maskOptions, i)) {
            arrayValue[i] = "";
          }
        }
        start = Math.max(prefix.length, start);
        arrayValue.splice(start, end - start);
        value = arrayValue.join("");
        return formatValue(maskOptions, value);
      }
      return arrayValue.map(function(character, i2) {
        if (i2 < start || i2 >= end) {
          return character;
        }
        if (isPermanentCharacter(maskOptions, i2)) {
          return mask[i2];
        }
        return maskChar;
      }).join("");
    }
    function insertString(maskOptions, value, insertStr, insertPosition) {
      var mask = maskOptions.mask, maskChar = maskOptions.maskChar, prefix = maskOptions.prefix;
      var arrayInsertStr = insertStr.split("");
      var isInputFilled = isFilled(maskOptions, value);
      var isUsablePosition = function isUsablePosition2(pos, character) {
        return !isPermanentCharacter(maskOptions, pos) || character === mask[pos];
      };
      var isUsableCharacter = function isUsableCharacter2(character, pos) {
        return !maskChar || !isPermanentCharacter(maskOptions, pos) || character !== maskChar;
      };
      if (!maskChar && insertPosition > value.length) {
        value += mask.slice(value.length, insertPosition);
      }
      arrayInsertStr.every(function(insertCharacter) {
        while (!isUsablePosition(insertPosition, insertCharacter)) {
          if (insertPosition >= value.length) {
            value += mask[insertPosition];
          }
          if (!isUsableCharacter(insertCharacter, insertPosition)) {
            return true;
          }
          insertPosition++;
          if (insertPosition >= mask.length) {
            return false;
          }
        }
        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;
        if (!isAllowed) {
          return true;
        }
        if (insertPosition < value.length) {
          if (maskChar || isInputFilled || insertPosition < prefix.length) {
            value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition + 1);
          } else {
            value = value.slice(0, insertPosition) + insertCharacter + value.slice(insertPosition);
            value = formatValue(maskOptions, value);
          }
        } else if (!maskChar) {
          value += insertCharacter;
        }
        insertPosition++;
        return insertPosition < mask.length;
      });
      return value;
    }
    function getInsertStringLength(maskOptions, value, insertStr, insertPosition) {
      var mask = maskOptions.mask, maskChar = maskOptions.maskChar;
      var arrayInsertStr = insertStr.split("");
      var initialInsertPosition = insertPosition;
      var isUsablePosition = function isUsablePosition2(pos, character) {
        return !isPermanentCharacter(maskOptions, pos) || character === mask[pos];
      };
      arrayInsertStr.every(function(insertCharacter) {
        while (!isUsablePosition(insertPosition, insertCharacter)) {
          insertPosition++;
          if (insertPosition >= mask.length) {
            return false;
          }
        }
        var isAllowed = isAllowedCharacter(maskOptions, insertPosition, insertCharacter) || insertCharacter === maskChar;
        if (isAllowed) {
          insertPosition++;
        }
        return insertPosition < mask.length;
      });
      return insertPosition - initialInsertPosition;
    }
    function getLeftEditablePosition(maskOptions, pos) {
      for (var i = pos; i >= 0; --i) {
        if (!isPermanentCharacter(maskOptions, i)) {
          return i;
        }
      }
      return null;
    }
    function getRightEditablePosition(maskOptions, pos) {
      var mask = maskOptions.mask;
      for (var i = pos; i < mask.length; ++i) {
        if (!isPermanentCharacter(maskOptions, i)) {
          return i;
        }
      }
      return null;
    }
    function getStringValue(value) {
      return !value && value !== 0 ? "" : value + "";
    }
    function processChange(maskOptions, value, selection, previousValue, previousSelection) {
      var mask = maskOptions.mask, prefix = maskOptions.prefix, lastEditablePosition = maskOptions.lastEditablePosition;
      var newValue = value;
      var enteredString = "";
      var formattedEnteredStringLength = 0;
      var removedLength = 0;
      var cursorPosition = Math.min(previousSelection.start, selection.start);
      if (selection.end > previousSelection.start) {
        enteredString = newValue.slice(previousSelection.start, selection.end);
        formattedEnteredStringLength = getInsertStringLength(maskOptions, previousValue, enteredString, cursorPosition);
        if (!formattedEnteredStringLength) {
          removedLength = 0;
        } else {
          removedLength = previousSelection.length;
        }
      } else if (newValue.length < previousValue.length) {
        removedLength = previousValue.length - newValue.length;
      }
      newValue = previousValue;
      if (removedLength) {
        if (removedLength === 1 && !previousSelection.length) {
          var deleteFromRight = previousSelection.start === selection.start;
          cursorPosition = deleteFromRight ? getRightEditablePosition(maskOptions, selection.start) : getLeftEditablePosition(maskOptions, selection.start);
        }
        newValue = clearRange(maskOptions, newValue, cursorPosition, removedLength);
      }
      newValue = insertString(maskOptions, newValue, enteredString, cursorPosition);
      cursorPosition = cursorPosition + formattedEnteredStringLength;
      if (cursorPosition >= mask.length) {
        cursorPosition = mask.length;
      } else if (cursorPosition < prefix.length && !formattedEnteredStringLength) {
        cursorPosition = prefix.length;
      } else if (cursorPosition >= prefix.length && cursorPosition < lastEditablePosition && formattedEnteredStringLength) {
        cursorPosition = getRightEditablePosition(maskOptions, cursorPosition);
      }
      newValue = formatValue(maskOptions, newValue);
      if (!enteredString) {
        enteredString = null;
      }
      return {
        value: newValue,
        enteredString,
        selection: {
          start: cursorPosition,
          end: cursorPosition
        }
      };
    }
    function isWindowsPhoneBrowser() {
      var windows = new RegExp("windows", "i");
      var phone = new RegExp("phone", "i");
      var ua = navigator.userAgent;
      return windows.test(ua) && phone.test(ua);
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function getRequestAnimationFrame() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame;
    }
    function getCancelAnimationFrame() {
      return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame;
    }
    function defer(fn) {
      var hasCancelAnimationFrame = !!getCancelAnimationFrame();
      var deferFn;
      if (hasCancelAnimationFrame) {
        deferFn = getRequestAnimationFrame();
      } else {
        deferFn = function deferFn2() {
          return setTimeout(fn, 1e3 / 60);
        };
      }
      return deferFn(fn);
    }
    function cancelDefer(deferId) {
      var cancelFn = getCancelAnimationFrame() || clearTimeout;
      cancelFn(deferId);
    }
    var InputElement = function(_React$Component) {
      _inheritsLoose(InputElement2, _React$Component);
      function InputElement2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.focused = false;
        _this.mounted = false;
        _this.previousSelection = null;
        _this.selectionDeferId = null;
        _this.saveSelectionLoopDeferId = null;
        _this.saveSelectionLoop = function() {
          _this.previousSelection = _this.getSelection();
          _this.saveSelectionLoopDeferId = defer(_this.saveSelectionLoop);
        };
        _this.runSaveSelectionLoop = function() {
          if (_this.saveSelectionLoopDeferId === null) {
            _this.saveSelectionLoop();
          }
        };
        _this.stopSaveSelectionLoop = function() {
          if (_this.saveSelectionLoopDeferId !== null) {
            cancelDefer(_this.saveSelectionLoopDeferId);
            _this.saveSelectionLoopDeferId = null;
            _this.previousSelection = null;
          }
        };
        _this.getInputDOMNode = function() {
          if (!_this.mounted) {
            return null;
          }
          var input = reactDom.findDOMNode(_assertThisInitialized4(_assertThisInitialized4(_this)));
          var isDOMNode = typeof window !== "undefined" && input instanceof window.Element;
          if (input && !isDOMNode) {
            return null;
          }
          if (input.nodeName !== "INPUT") {
            input = input.querySelector("input");
          }
          if (!input) {
            throw new Error("react-input-mask: inputComponent doesn't contain input node");
          }
          return input;
        };
        _this.getInputValue = function() {
          var input = _this.getInputDOMNode();
          if (!input) {
            return null;
          }
          return input.value;
        };
        _this.setInputValue = function(value) {
          var input = _this.getInputDOMNode();
          if (!input) {
            return;
          }
          _this.value = value;
          input.value = value;
        };
        _this.setCursorToEnd = function() {
          var filledLength = getFilledLength(_this.maskOptions, _this.value);
          var pos = getRightEditablePosition(_this.maskOptions, filledLength);
          if (pos !== null) {
            _this.setCursorPosition(pos);
          }
        };
        _this.setSelection = function(start, end, options) {
          if (options === void 0) {
            options = {};
          }
          var input = _this.getInputDOMNode();
          var isFocused = _this.isFocused();
          if (!input || !isFocused) {
            return;
          }
          var _options = options, deferred = _options.deferred;
          if (!deferred) {
            setInputSelection(input, start, end);
          }
          if (_this.selectionDeferId !== null) {
            cancelDefer(_this.selectionDeferId);
          }
          _this.selectionDeferId = defer(function() {
            _this.selectionDeferId = null;
            setInputSelection(input, start, end);
          });
          _this.previousSelection = {
            start,
            end,
            length: Math.abs(end - start)
          };
        };
        _this.getSelection = function() {
          var input = _this.getInputDOMNode();
          return getInputSelection(input);
        };
        _this.getCursorPosition = function() {
          return _this.getSelection().start;
        };
        _this.setCursorPosition = function(pos) {
          _this.setSelection(pos, pos);
        };
        _this.isFocused = function() {
          return _this.focused;
        };
        _this.getBeforeMaskedValueChangeConfig = function() {
          var _this$maskOptions = _this.maskOptions, mask = _this$maskOptions.mask, maskChar = _this$maskOptions.maskChar, permanents = _this$maskOptions.permanents, formatChars = _this$maskOptions.formatChars;
          var alwaysShowMask = _this.props.alwaysShowMask;
          return {
            mask,
            maskChar,
            permanents,
            alwaysShowMask: !!alwaysShowMask,
            formatChars
          };
        };
        _this.isInputAutofilled = function(value, selection, previousValue, previousSelection) {
          var input = _this.getInputDOMNode();
          try {
            if (input.matches(":-webkit-autofill")) {
              return true;
            }
          } catch (e) {
          }
          if (!_this.focused) {
            return true;
          }
          return previousSelection.end < previousValue.length && selection.end === value.length;
        };
        _this.onChange = function(event) {
          var _assertThisInitialize = _assertThisInitialized4(_assertThisInitialized4(_this)), beforePasteState = _assertThisInitialize.beforePasteState;
          var _assertThisInitialize2 = _assertThisInitialized4(_assertThisInitialized4(_this)), previousSelection = _assertThisInitialize2.previousSelection;
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var value = _this.getInputValue();
          var previousValue = _this.value;
          var selection = _this.getSelection();
          if (_this.isInputAutofilled(value, selection, previousValue, previousSelection)) {
            previousValue = formatValue(_this.maskOptions, "");
            previousSelection = {
              start: 0,
              end: 0,
              length: 0
            };
          }
          if (beforePasteState) {
            previousSelection = beforePasteState.selection;
            previousValue = beforePasteState.value;
            selection = {
              start: previousSelection.start + value.length,
              end: previousSelection.start + value.length,
              length: 0
            };
            value = previousValue.slice(0, previousSelection.start) + value + previousValue.slice(previousSelection.end);
            _this.beforePasteState = null;
          }
          var changedState = processChange(_this.maskOptions, value, selection, previousValue, previousSelection);
          var enteredString = changedState.enteredString;
          var newSelection = changedState.selection;
          var newValue = changedState.value;
          if (isFunction(beforeMaskedValueChange)) {
            var modifiedValue2 = beforeMaskedValueChange({
              value: newValue,
              selection: newSelection
            }, {
              value: previousValue,
              selection: previousSelection
            }, enteredString, _this.getBeforeMaskedValueChangeConfig());
            newValue = modifiedValue2.value;
            newSelection = modifiedValue2.selection;
          }
          _this.setInputValue(newValue);
          if (isFunction(_this.props.onChange)) {
            _this.props.onChange(event);
          }
          if (_this.isWindowsPhoneBrowser) {
            _this.setSelection(newSelection.start, newSelection.end, {
              deferred: true
            });
          } else {
            _this.setSelection(newSelection.start, newSelection.end);
          }
        };
        _this.onFocus = function(event) {
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var _this$maskOptions2 = _this.maskOptions, mask = _this$maskOptions2.mask, prefix = _this$maskOptions2.prefix;
          _this.focused = true;
          _this.mounted = true;
          if (mask) {
            if (!_this.value) {
              var emptyValue = formatValue(_this.maskOptions, prefix);
              var newValue = formatValue(_this.maskOptions, emptyValue);
              var filledLength = getFilledLength(_this.maskOptions, newValue);
              var cursorPosition = getRightEditablePosition(_this.maskOptions, filledLength);
              var newSelection = {
                start: cursorPosition,
                end: cursorPosition
              };
              if (isFunction(beforeMaskedValueChange)) {
                var modifiedValue2 = beforeMaskedValueChange({
                  value: newValue,
                  selection: newSelection
                }, {
                  value: _this.value,
                  selection: null
                }, null, _this.getBeforeMaskedValueChangeConfig());
                newValue = modifiedValue2.value;
                newSelection = modifiedValue2.selection;
              }
              var isInputValueChanged = newValue !== _this.getInputValue();
              if (isInputValueChanged) {
                _this.setInputValue(newValue);
              }
              if (isInputValueChanged && isFunction(_this.props.onChange)) {
                _this.props.onChange(event);
              }
              _this.setSelection(newSelection.start, newSelection.end);
            } else if (getFilledLength(_this.maskOptions, _this.value) < _this.maskOptions.mask.length) {
              _this.setCursorToEnd();
            }
            _this.runSaveSelectionLoop();
          }
          if (isFunction(_this.props.onFocus)) {
            _this.props.onFocus(event);
          }
        };
        _this.onBlur = function(event) {
          var beforeMaskedValueChange = _this.props.beforeMaskedValueChange;
          var mask = _this.maskOptions.mask;
          _this.stopSaveSelectionLoop();
          _this.focused = false;
          if (mask && !_this.props.alwaysShowMask && isEmpty(_this.maskOptions, _this.value)) {
            var newValue = "";
            if (isFunction(beforeMaskedValueChange)) {
              var modifiedValue2 = beforeMaskedValueChange({
                value: newValue,
                selection: null
              }, {
                value: _this.value,
                selection: _this.previousSelection
              }, null, _this.getBeforeMaskedValueChangeConfig());
              newValue = modifiedValue2.value;
            }
            var isInputValueChanged = newValue !== _this.getInputValue();
            if (isInputValueChanged) {
              _this.setInputValue(newValue);
            }
            if (isInputValueChanged && isFunction(_this.props.onChange)) {
              _this.props.onChange(event);
            }
          }
          if (isFunction(_this.props.onBlur)) {
            _this.props.onBlur(event);
          }
        };
        _this.onMouseDown = function(event) {
          if (!_this.focused && document.addEventListener) {
            _this.mouseDownX = event.clientX;
            _this.mouseDownY = event.clientY;
            _this.mouseDownTime = new Date().getTime();
            var mouseUpHandler = function mouseUpHandler2(mouseUpEvent) {
              document.removeEventListener("mouseup", mouseUpHandler2);
              if (!_this.focused) {
                return;
              }
              var deltaX = Math.abs(mouseUpEvent.clientX - _this.mouseDownX);
              var deltaY = Math.abs(mouseUpEvent.clientY - _this.mouseDownY);
              var axisDelta = Math.max(deltaX, deltaY);
              var timeDelta = new Date().getTime() - _this.mouseDownTime;
              if (axisDelta <= 10 && timeDelta <= 200 || axisDelta <= 5 && timeDelta <= 300) {
                _this.setCursorToEnd();
              }
            };
            document.addEventListener("mouseup", mouseUpHandler);
          }
          if (isFunction(_this.props.onMouseDown)) {
            _this.props.onMouseDown(event);
          }
        };
        _this.onPaste = function(event) {
          if (isFunction(_this.props.onPaste)) {
            _this.props.onPaste(event);
          }
          if (!event.defaultPrevented) {
            _this.beforePasteState = {
              value: _this.getInputValue(),
              selection: _this.getSelection()
            };
            _this.setInputValue("");
          }
        };
        _this.handleRef = function(ref) {
          if (_this.props.children == null && isFunction(_this.props.inputRef)) {
            _this.props.inputRef(ref);
          }
        };
        var _mask = props.mask, _maskChar = props.maskChar, _formatChars = props.formatChars, _alwaysShowMask = props.alwaysShowMask, _beforeMaskedValueChange = props.beforeMaskedValueChange;
        var defaultValue = props.defaultValue, _value = props.value;
        _this.maskOptions = parseMask(_mask, _maskChar, _formatChars);
        if (defaultValue == null) {
          defaultValue = "";
        }
        if (_value == null) {
          _value = defaultValue;
        }
        var _newValue = getStringValue(_value);
        if (_this.maskOptions.mask && (_alwaysShowMask || _newValue)) {
          _newValue = formatValue(_this.maskOptions, _newValue);
          if (isFunction(_beforeMaskedValueChange)) {
            var oldValue = props.value;
            if (props.value == null) {
              oldValue = defaultValue;
            }
            oldValue = getStringValue(oldValue);
            var modifiedValue = _beforeMaskedValueChange({
              value: _newValue,
              selection: null
            }, {
              value: oldValue,
              selection: null
            }, null, _this.getBeforeMaskedValueChangeConfig());
            _newValue = modifiedValue.value;
          }
        }
        _this.value = _newValue;
        return _this;
      }
      var _proto = InputElement2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        if (!this.getInputDOMNode()) {
          return;
        }
        this.isWindowsPhoneBrowser = isWindowsPhoneBrowser();
        if (this.maskOptions.mask && this.getInputValue() !== this.value) {
          this.setInputValue(this.value);
        }
      };
      _proto.componentDidUpdate = function componentDidUpdate() {
        var previousSelection = this.previousSelection;
        var _this$props = this.props, beforeMaskedValueChange = _this$props.beforeMaskedValueChange, alwaysShowMask = _this$props.alwaysShowMask, mask = _this$props.mask, maskChar = _this$props.maskChar, formatChars = _this$props.formatChars;
        var previousMaskOptions = this.maskOptions;
        var showEmpty = alwaysShowMask || this.isFocused();
        var hasValue = this.props.value != null;
        var newValue = hasValue ? getStringValue(this.props.value) : this.value;
        var cursorPosition = previousSelection ? previousSelection.start : null;
        this.maskOptions = parseMask(mask, maskChar, formatChars);
        if (!this.maskOptions.mask) {
          if (previousMaskOptions.mask) {
            this.stopSaveSelectionLoop();
            this.forceUpdate();
          }
          return;
        } else if (!previousMaskOptions.mask && this.isFocused()) {
          this.runSaveSelectionLoop();
        }
        var isMaskChanged = this.maskOptions.mask && this.maskOptions.mask !== previousMaskOptions.mask;
        if (!previousMaskOptions.mask && !hasValue) {
          newValue = this.getInputValue();
        }
        if (isMaskChanged || this.maskOptions.mask && (newValue || showEmpty)) {
          newValue = formatValue(this.maskOptions, newValue);
        }
        if (isMaskChanged) {
          var filledLength = getFilledLength(this.maskOptions, newValue);
          if (cursorPosition === null || filledLength < cursorPosition) {
            if (isFilled(this.maskOptions, newValue)) {
              cursorPosition = filledLength;
            } else {
              cursorPosition = getRightEditablePosition(this.maskOptions, filledLength);
            }
          }
        }
        if (this.maskOptions.mask && isEmpty(this.maskOptions, newValue) && !showEmpty && (!hasValue || !this.props.value)) {
          newValue = "";
        }
        var newSelection = {
          start: cursorPosition,
          end: cursorPosition
        };
        if (isFunction(beforeMaskedValueChange)) {
          var modifiedValue = beforeMaskedValueChange({
            value: newValue,
            selection: newSelection
          }, {
            value: this.value,
            selection: this.previousSelection
          }, null, this.getBeforeMaskedValueChangeConfig());
          newValue = modifiedValue.value;
          newSelection = modifiedValue.selection;
        }
        this.value = newValue;
        var isValueChanged = this.getInputValue() !== this.value;
        if (isValueChanged) {
          this.setInputValue(this.value);
          this.forceUpdate();
        } else if (isMaskChanged) {
          this.forceUpdate();
        }
        var isSelectionChanged = false;
        if (newSelection.start != null && newSelection.end != null) {
          isSelectionChanged = !previousSelection || previousSelection.start !== newSelection.start || previousSelection.end !== newSelection.end;
        }
        if (isSelectionChanged || isValueChanged) {
          this.setSelection(newSelection.start, newSelection.end);
        }
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
        if (this.selectionDeferId !== null) {
          cancelDefer(this.selectionDeferId);
        }
        this.stopSaveSelectionLoop();
      };
      _proto.render = function render() {
        var _this$props2 = this.props, mask = _this$props2.mask, alwaysShowMask = _this$props2.alwaysShowMask, maskChar = _this$props2.maskChar, formatChars = _this$props2.formatChars, inputRef = _this$props2.inputRef, beforeMaskedValueChange = _this$props2.beforeMaskedValueChange, children = _this$props2.children, restProps = _objectWithoutPropertiesLoose8(_this$props2, ["mask", "alwaysShowMask", "maskChar", "formatChars", "inputRef", "beforeMaskedValueChange", "children"]);
        var inputElement;
        true ? warning(
          !restProps.maxLength || !parseMask(mask, maskChar, formatChars).mask,
          "react-input-mask: maxLength property shouldn't be passed to the masked input. It breaks masking and unnecessary because length is limited by the mask length."
        ) : void 0;
        if (children) {
          !isFunction(children) ? true ? invariant(false, "react-input-mask: children must be a function") : invariant(false) : void 0;
          var controlledProps = ["onChange", "onPaste", "onMouseDown", "onFocus", "onBlur", "value", "disabled", "readOnly"];
          var childrenProps = _extends8({}, restProps);
          controlledProps.forEach(function(propId) {
            return delete childrenProps[propId];
          });
          inputElement = children(childrenProps);
          var conflictProps = controlledProps.filter(function(propId) {
            return inputElement.props[propId] != null && inputElement.props[propId] !== restProps[propId];
          });
          !!conflictProps.length ? true ? invariant(false, "react-input-mask: the following props should be passed to the react-input-mask's component and should not be altered in children's function: " + conflictProps.join(", ")) : invariant(false) : void 0;
          true ? warning(!inputRef, "react-input-mask: inputRef is ignored when children is passed, attach ref to the children instead") : void 0;
        } else {
          inputElement = React10.createElement("input", _extends8({
            ref: this.handleRef
          }, restProps));
        }
        var changedProps = {
          onFocus: this.onFocus,
          onBlur: this.onBlur
        };
        if (this.maskOptions.mask) {
          if (!restProps.disabled && !restProps.readOnly) {
            changedProps.onChange = this.onChange;
            changedProps.onPaste = this.onPaste;
            changedProps.onMouseDown = this.onMouseDown;
          }
          if (restProps.value != null) {
            changedProps.value = this.value;
          }
        }
        inputElement = React10.cloneElement(inputElement, changedProps);
        return inputElement;
      };
      return InputElement2;
    }(React10.Component);
    module.exports = InputElement;
  }
});

// node_modules/react-input-mask/index.js
var require_react_input_mask = __commonJS({
  "node_modules/react-input-mask/index.js"(exports, module) {
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_input_mask_development();
    }
  }
});

// node_modules/baseui/esm/input/constants.js
var STATE_CHANGE_TYPE = {
  change: "change"
};
var CUSTOM_INPUT_TYPE = {
  textarea: "textarea"
};
var ADJOINED = {
  none: "none",
  left: "left",
  right: "right",
  both: "both"
};
var SIZE = {
  mini: "mini",
  default: "default",
  compact: "compact",
  large: "large"
};
var ENHANCER_POSITION = {
  start: "start",
  end: "end"
};

// node_modules/baseui/esm/input/stateful-container.js
var React = __toESM(require_react());
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var _excluded = ["children", "initialState", "stateReducer"];
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var defaultStateReducer = function defaultStateReducer2(type, nextState) {
  return nextState;
};
var StatefulContainer = function(_React$Component) {
  _inherits(StatefulContainer2, _React$Component);
  var _super = _createSuper(StatefulContainer2);
  function StatefulContainer2() {
    var _this;
    _classCallCheck(this, StatefulContainer2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", _objectSpread({
      value: ""
    }, _this.props.initialState));
    _defineProperty(_assertThisInitialized(_this), "onChange", function(e) {
      var nextState = {
        value: e.target.value
      };
      _this.internalSetState(STATE_CHANGE_TYPE.change, nextState);
      _this.props.onChange(e);
    });
    _defineProperty(_assertThisInitialized(_this), "internalSetState", function(type, nextState) {
      var newState = _this.props.stateReducer(type, nextState, _this.state);
      _this.setState(newState);
    });
    return _this;
  }
  _createClass(StatefulContainer2, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, children = _this$props.children, initialState = _this$props.initialState, stateReducer = _this$props.stateReducer, restProps = _objectWithoutProperties(_this$props, _excluded);
      var onChange3 = this.onChange;
      return children(_objectSpread(_objectSpread(_objectSpread({}, restProps), this.state), {}, {
        onChange: onChange3
      }));
    }
  }]);
  return StatefulContainer2;
}(React.Component);
_defineProperty(StatefulContainer, "defaultProps", {
  initialState: {},
  stateReducer: defaultStateReducer,
  onChange: function onChange() {
  },
  onClear: function onClear() {
  }
});
var stateful_container_default = StatefulContainer;

// node_modules/baseui/esm/icon/delete-alt.js
var React3 = __toESM(require_react());

// node_modules/baseui/esm/icon/icon.js
var React2 = __toESM(require_react());

// node_modules/baseui/esm/icon/styled-components.js
function getSvgStyles(_ref) {
  var $theme = _ref.$theme, $size = _ref.$size, $color = _ref.$color;
  var size = $theme.sizing.scale600;
  if ($size) {
    if ($theme.sizing[$size]) {
      size = $theme.sizing[$size];
    } else if (typeof $size === "number") {
      size = "".concat($size, "px");
    } else {
      size = $size;
    }
  }
  var color = "currentColor";
  if ($color) {
    if ($theme.colors[$color]) {
      color = $theme.colors[$color];
    } else {
      color = $color;
    }
  }
  return {
    display: "inline-block",
    fill: color,
    color,
    height: size,
    width: size
  };
}
var Svg = styled("svg", getSvgStyles);
Svg.displayName = "Svg";
Svg.displayName = "Svg";

// node_modules/baseui/esm/icon/omit-dollar-prefixed-keys.js
function omitDollarPrefixedKeys(source) {
  var result = {};
  for (var key in source) {
    if (key[0] !== "$") {
      result[key] = source[key];
    }
  }
  return result;
}

// node_modules/baseui/esm/icon/icon.js
var _excluded2 = ["children", "title", "size", "color", "overrides"];
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source), true).forEach(function(key) {
      _defineProperty2(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys2(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty2(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _objectWithoutProperties2(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Icon = function Icon2(props, ref) {
  var children = props.children, title = props.title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties2(props, _excluded2);
  var _getOverrides = getOverrides(overrides.Svg, Svg), _getOverrides2 = _slicedToArray(_getOverrides, 2), Svg2 = _getOverrides2[0], overrideProps = _getOverrides2[1];
  var passThroughProps = Svg2.__STYLETRON__ ? _objectSpread2(_objectSpread2({
    title,
    $color: color,
    $size: size
  }, restProps), overrideProps) : _objectSpread2(_objectSpread2({
    title,
    color,
    size
  }, omitDollarPrefixedKeys(restProps)), omitDollarPrefixedKeys(overrideProps));
  return React2.createElement(Svg2, _extends({
    "data-baseweb": "icon",
    ref
  }, passThroughProps), title ? React2.createElement("title", null, title) : null, children);
};
var icon_default = React2.forwardRef(Icon);

// node_modules/baseui/esm/icon/delete-alt.js
var _excluded3 = ["title", "size", "color", "overrides"];
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutProperties3(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray2(arr, i) {
  return _arrayWithHoles2(arr) || _iterableToArrayLimit2(arr, i) || _unsupportedIterableToArray2(arr, i) || _nonIterableRest2();
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray2(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray2(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray2(o, minLen);
}
function _arrayLikeToArray2(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit2(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles2(arr) {
  if (Array.isArray(arr))
    return arr;
}
function DeleteAlt(props, ref) {
  var _useStyletron = useStyletron(), _useStyletron2 = _slicedToArray2(_useStyletron, 2), theme = _useStyletron2[1];
  var _props$title = props.title, title = _props$title === void 0 ? "Delete Alt" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties3(props, _excluded3);
  var SvgOverride = mergeOverride(
    {
      component: theme.icons && theme.icons.DeleteAlt ? theme.icons.DeleteAlt : null
    },
    overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
  );
  return React3.createElement(icon_default, _extends2({
    viewBox: "0 0 24 24",
    ref,
    title,
    size,
    color,
    overrides: {
      Svg: SvgOverride
    }
  }, restProps), React3.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M12 20C16.4183 20 20 16.4183 20 12C20 7.58173 16.4183 4 12 4C7.58173 4 4 7.58173 4 12C4 16.4183 7.58173 20 12 20ZM10.0303 8.96967C9.73743 8.67679 9.26257 8.67679 8.96967 8.96967C8.67676 9.26257 8.67676 9.73743 8.96967 10.0303L10.9393 12L8.96967 13.9697C8.67676 14.2626 8.67676 14.7374 8.96967 15.0303C9.26257 15.3232 9.73743 15.3232 10.0303 15.0303L12 13.0607L13.9697 15.0303C14.2626 15.3232 14.7374 15.3232 15.0303 15.0303C15.3232 14.7374 15.3232 14.2626 15.0303 13.9697L13.0607 12L15.0303 10.0303C15.3232 9.73743 15.3232 9.26257 15.0303 8.96967C14.7374 8.67679 14.2626 8.67679 13.9697 8.96967L12 10.9393L10.0303 8.96967Z"
  }));
}
var delete_alt_default = React3.forwardRef(DeleteAlt);

// node_modules/baseui/esm/input/styled-components.js
function ownKeys3(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread3(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys3(Object(source), true).forEach(function(key) {
      _defineProperty3(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys3(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty3(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var StyledMaskToggleButton = styled("button", function(_ref) {
  var _SIZE$mini$SIZE$compa;
  var $theme = _ref.$theme, $size = _ref.$size, $isFocusVisible = _ref.$isFocusVisible;
  var pad = (_SIZE$mini$SIZE$compa = {}, _defineProperty3(_SIZE$mini$SIZE$compa, SIZE.mini, $theme.sizing.scale400), _defineProperty3(_SIZE$mini$SIZE$compa, SIZE.compact, $theme.sizing.scale400), _defineProperty3(_SIZE$mini$SIZE$compa, SIZE.default, $theme.sizing.scale300), _defineProperty3(_SIZE$mini$SIZE$compa, SIZE.large, $theme.sizing.scale200), _SIZE$mini$SIZE$compa)[$size];
  return {
    display: "flex",
    alignItems: "center",
    borderTopStyle: "none",
    borderBottomStyle: "none",
    borderLeftStyle: "none",
    borderRightStyle: "none",
    background: "none",
    paddingLeft: pad,
    paddingRight: pad,
    outline: $isFocusVisible ? "solid 3px ".concat($theme.colors.accent) : "none",
    color: $theme.colors.contentPrimary
  };
});
StyledMaskToggleButton.displayName = "StyledMaskToggleButton";
StyledMaskToggleButton.displayName = "StyledMaskToggleButton";
var StyledClearIconContainer = styled("div", function(_ref2) {
  var _SIZE$mini$SIZE$compa2;
  var _ref2$$alignTop = _ref2.$alignTop, $alignTop = _ref2$$alignTop === void 0 ? false : _ref2$$alignTop, $size = _ref2.$size, $theme = _ref2.$theme;
  var pad = (_SIZE$mini$SIZE$compa2 = {}, _defineProperty3(_SIZE$mini$SIZE$compa2, SIZE.mini, $theme.sizing.scale200), _defineProperty3(_SIZE$mini$SIZE$compa2, SIZE.compact, $theme.sizing.scale200), _defineProperty3(_SIZE$mini$SIZE$compa2, SIZE.default, $theme.sizing.scale100), _defineProperty3(_SIZE$mini$SIZE$compa2, SIZE.large, $theme.sizing.scale0), _SIZE$mini$SIZE$compa2)[$size];
  return {
    display: "flex",
    alignItems: $alignTop ? "flex-start" : "center",
    paddingLeft: pad,
    paddingRight: pad,
    paddingTop: $alignTop ? $theme.sizing.scale500 : "0px",
    color: $theme.colors.contentPrimary
  };
});
StyledClearIconContainer.displayName = "StyledClearIconContainer";
StyledClearIconContainer.displayName = "StyledClearIconContainer";
var StyledClearIcon = styled(delete_alt_default, function(_ref3) {
  var $theme = _ref3.$theme, $isFocusVisible = _ref3.$isFocusVisible;
  return {
    cursor: "pointer",
    outline: $isFocusVisible ? "solid 3px ".concat($theme.colors.accent) : "none"
  };
});
StyledClearIcon.displayName = "StyledClearIcon";
StyledClearIcon.displayName = "StyledClearIcon";
function getInputPadding(size, sizing) {
  var _SIZE$mini$SIZE$compa3;
  return (_SIZE$mini$SIZE$compa3 = {}, _defineProperty3(_SIZE$mini$SIZE$compa3, SIZE.mini, {
    paddingTop: sizing.scale100,
    paddingBottom: sizing.scale100,
    paddingLeft: sizing.scale550,
    paddingRight: sizing.scale550
  }), _defineProperty3(_SIZE$mini$SIZE$compa3, SIZE.compact, {
    paddingTop: sizing.scale200,
    paddingBottom: sizing.scale200,
    paddingLeft: sizing.scale550,
    paddingRight: sizing.scale550
  }), _defineProperty3(_SIZE$mini$SIZE$compa3, SIZE.default, {
    paddingTop: sizing.scale400,
    paddingBottom: sizing.scale400,
    paddingLeft: sizing.scale550,
    paddingRight: sizing.scale550
  }), _defineProperty3(_SIZE$mini$SIZE$compa3, SIZE.large, {
    paddingTop: sizing.scale550,
    paddingBottom: sizing.scale550,
    paddingLeft: sizing.scale550,
    paddingRight: sizing.scale550
  }), _SIZE$mini$SIZE$compa3)[size];
}
function getRootPadding(adjoined, size, sizing, direction, hasIconTrailing) {
  var ifLeftPad = adjoined === ADJOINED.both || adjoined === ADJOINED.left && direction !== "rtl" || adjoined === ADJOINED.right && direction === "rtl" || hasIconTrailing && direction === "rtl";
  var ifRightPad = adjoined === ADJOINED.both || adjoined === ADJOINED.right && direction !== "rtl" || adjoined === ADJOINED.left && direction === "rtl" || hasIconTrailing && direction !== "rtl";
  return {
    paddingLeft: ifLeftPad ? sizing.scale550 : "0px",
    paddingRight: ifRightPad ? sizing.scale550 : "0px"
  };
}
function getFont(size, typography) {
  var _SIZE$mini$SIZE$compa4;
  return (_SIZE$mini$SIZE$compa4 = {}, _defineProperty3(_SIZE$mini$SIZE$compa4, SIZE.mini, typography.font100), _defineProperty3(_SIZE$mini$SIZE$compa4, SIZE.compact, typography.font200), _defineProperty3(_SIZE$mini$SIZE$compa4, SIZE.default, typography.font300), _defineProperty3(_SIZE$mini$SIZE$compa4, SIZE.large, typography.font400), _SIZE$mini$SIZE$compa4)[size];
}
function getRootColors($disabled, $isFocused, $error) {
  var $positive = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var colors = arguments.length > 4 ? arguments[4] : void 0;
  if ($disabled) {
    return {
      borderLeftColor: colors.inputFillDisabled,
      borderRightColor: colors.inputFillDisabled,
      borderTopColor: colors.inputFillDisabled,
      borderBottomColor: colors.inputFillDisabled,
      backgroundColor: colors.inputFillDisabled
    };
  }
  if ($isFocused) {
    return {
      borderLeftColor: colors.borderSelected,
      borderRightColor: colors.borderSelected,
      borderTopColor: colors.borderSelected,
      borderBottomColor: colors.borderSelected,
      backgroundColor: colors.inputFillActive
    };
  }
  if ($error) {
    return {
      borderLeftColor: colors.inputBorderError,
      borderRightColor: colors.inputBorderError,
      borderTopColor: colors.inputBorderError,
      borderBottomColor: colors.inputBorderError,
      backgroundColor: colors.inputFillError
    };
  }
  if ($positive) {
    return {
      borderLeftColor: colors.inputBorderPositive,
      borderRightColor: colors.inputBorderPositive,
      borderTopColor: colors.inputBorderPositive,
      borderBottomColor: colors.inputBorderPositive,
      backgroundColor: colors.inputFillPositive
    };
  }
  return {
    borderLeftColor: colors.inputBorder,
    borderRightColor: colors.inputBorder,
    borderTopColor: colors.inputBorder,
    borderBottomColor: colors.inputBorder,
    backgroundColor: colors.inputFill
  };
}
function getRootBorderRadius(size, borders) {
  var radius = borders.inputBorderRadius;
  if (size === SIZE.mini) {
    radius = borders.inputBorderRadiusMini;
  }
  return {
    borderTopLeftRadius: radius,
    borderBottomLeftRadius: radius,
    borderTopRightRadius: radius,
    borderBottomRightRadius: radius
  };
}
var getRootStyles = function getRootStyles2(props) {
  var $isFocused = props.$isFocused, $adjoined = props.$adjoined, $error = props.$error, $disabled = props.$disabled, $positive = props.$positive, $size = props.$size, $theme = props.$theme, _props$$theme = props.$theme, borders = _props$$theme.borders, colors = _props$$theme.colors, sizing = _props$$theme.sizing, typography = _props$$theme.typography, animation = _props$$theme.animation, $hasIconTrailing = props.$hasIconTrailing;
  return _objectSpread3(_objectSpread3(_objectSpread3(_objectSpread3({
    boxSizing: "border-box",
    display: "flex",
    overflow: "hidden",
    width: "100%",
    borderLeftWidth: "2px",
    borderRightWidth: "2px",
    borderTopWidth: "2px",
    borderBottomWidth: "2px",
    borderLeftStyle: "solid",
    borderRightStyle: "solid",
    borderTopStyle: "solid",
    borderBottomStyle: "solid",
    transitionProperty: "border",
    transitionDuration: animation.timing200,
    transitionTimingFunction: animation.easeOutCurve
  }, getRootBorderRadius($size, borders)), getFont($size, typography)), getRootColors($disabled, $isFocused, $error, $positive, colors)), getRootPadding($adjoined, $size, sizing, $theme.direction, $hasIconTrailing));
};
var Root = styled("div", getRootStyles);
Root.displayName = "Root";
Root.displayName = "Root";
function getInputEnhancerPadding($size, sizing) {
  var _SIZE$mini$SIZE$compa5;
  return (_SIZE$mini$SIZE$compa5 = {}, _defineProperty3(_SIZE$mini$SIZE$compa5, SIZE.mini, {
    paddingRight: sizing.scale400,
    paddingLeft: sizing.scale400
  }), _defineProperty3(_SIZE$mini$SIZE$compa5, SIZE.compact, {
    paddingRight: sizing.scale400,
    paddingLeft: sizing.scale400
  }), _defineProperty3(_SIZE$mini$SIZE$compa5, SIZE.default, {
    paddingRight: sizing.scale300,
    paddingLeft: sizing.scale300
  }), _defineProperty3(_SIZE$mini$SIZE$compa5, SIZE.large, {
    paddingRight: sizing.scale200,
    paddingLeft: sizing.scale200
  }), _SIZE$mini$SIZE$compa5)[$size];
}
function getInputEnhancerColors($disabled, $isFocused, $error, $positive, colors) {
  if ($disabled) {
    return {
      color: colors.inputEnhancerTextDisabled,
      backgroundColor: colors.inputFillDisabled
    };
  }
  if ($isFocused) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillActive
    };
  }
  if ($error) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillError
    };
  }
  if ($positive) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillPositive
    };
  }
  return {
    color: colors.contentPrimary,
    backgroundColor: colors.inputFill
  };
}
var InputEnhancer = styled("div", function(props) {
  var $size = props.$size, $disabled = props.$disabled, $isFocused = props.$isFocused, $error = props.$error, $positive = props.$positive, _props$$theme2 = props.$theme, colors = _props$$theme2.colors, sizing = _props$$theme2.sizing, typography = _props$$theme2.typography, animation = _props$$theme2.animation;
  return _objectSpread3(_objectSpread3(_objectSpread3({
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transitionProperty: "color, background-color",
    transitionDuration: animation.timing200,
    transitionTimingFunction: animation.easeOutCurve
  }, getFont($size, typography)), getInputEnhancerPadding($size, sizing)), getInputEnhancerColors($disabled, $isFocused, $error, $positive, colors));
});
InputEnhancer.displayName = "InputEnhancer";
InputEnhancer.displayName = "InputEnhancer";
function getInputContainerColors($disabled, $isFocused, $error, $positive, colors) {
  if ($disabled) {
    return {
      color: colors.inputTextDisabled,
      backgroundColor: colors.inputFillDisabled
    };
  }
  if ($isFocused) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillActive
    };
  }
  if ($error) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillError
    };
  }
  if ($positive) {
    return {
      color: colors.contentPrimary,
      backgroundColor: colors.inputFillPositive
    };
  }
  return {
    color: colors.contentPrimary,
    backgroundColor: colors.inputFill
  };
}
var getInputContainerStyles = function getInputContainerStyles2(props) {
  var $isFocused = props.$isFocused, $error = props.$error, $disabled = props.$disabled, $positive = props.$positive, $size = props.$size, _props$$theme3 = props.$theme, colors = _props$$theme3.colors, typography = _props$$theme3.typography, animation = _props$$theme3.animation;
  return _objectSpread3(_objectSpread3({
    display: "flex",
    width: "100%",
    transitionProperty: "background-color",
    transitionDuration: animation.timing200,
    transitionTimingFunction: animation.easeOutCurve
  }, getFont($size, typography)), getInputContainerColors($disabled, $isFocused, $error, $positive, colors));
};
var InputContainer = styled("div", getInputContainerStyles);
InputContainer.displayName = "InputContainer";
InputContainer.displayName = "InputContainer";
function getInputColors($disabled, $isFocused, $error, colors) {
  if ($disabled) {
    return {
      color: colors.inputTextDisabled,
      "-webkit-text-fill-color": colors.inputTextDisabled,
      caretColor: colors.contentPrimary,
      "::placeholder": {
        color: colors.inputPlaceholderDisabled
      }
    };
  }
  return {
    color: colors.contentPrimary,
    caretColor: colors.contentPrimary,
    "::placeholder": {
      color: colors.inputPlaceholder
    }
  };
}
var getInputStyles = function getInputStyles2(props) {
  var $disabled = props.$disabled, $isFocused = props.$isFocused, $error = props.$error, $size = props.$size, _props$$theme4 = props.$theme, colors = _props$$theme4.colors, sizing = _props$$theme4.sizing, typography = _props$$theme4.typography;
  return _objectSpread3(_objectSpread3(_objectSpread3({
    boxSizing: "border-box",
    backgroundColor: "transparent",
    borderLeftWidth: 0,
    borderRightWidth: 0,
    borderTopWidth: 0,
    borderBottomWidth: 0,
    borderLeftStyle: "none",
    borderRightStyle: "none",
    borderTopStyle: "none",
    borderBottomStyle: "none",
    outline: "none",
    width: "100%",
    minWidth: 0,
    maxWidth: "100%",
    cursor: $disabled ? "not-allowed" : "text",
    margin: "0",
    paddingTop: "0",
    paddingBottom: "0",
    paddingLeft: "0",
    paddingRight: "0"
  }, getFont($size, typography)), getInputPadding($size, sizing)), getInputColors($disabled, $isFocused, $error, colors));
};
var Input = styled("input", getInputStyles);
Input.displayName = "Input";
Input.displayName = "Input";

// node_modules/baseui/esm/input/base-input.js
var React6 = __toESM(require_react());

// node_modules/baseui/esm/input/utils.js
function getSharedProps(props, state) {
  var disabled = props.disabled, error = props.error, positive = props.positive, adjoined = props.adjoined, size = props.size, required = props.required, resize = props.resize, readOnly = props.readOnly;
  var isFocused = state.isFocused;
  return {
    $isFocused: isFocused,
    $disabled: disabled,
    $error: error,
    $positive: positive,
    $adjoined: adjoined,
    $size: size,
    $required: required,
    $resize: resize,
    $isReadOnly: readOnly
  };
}

// node_modules/baseui/esm/icon/hide.js
var React4 = __toESM(require_react());
var _excluded4 = ["title", "size", "color", "overrides"];
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function _objectWithoutProperties4(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose4(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray3(arr, i) {
  return _arrayWithHoles3(arr) || _iterableToArrayLimit3(arr, i) || _unsupportedIterableToArray3(arr, i) || _nonIterableRest3();
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray3(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray3(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray3(o, minLen);
}
function _arrayLikeToArray3(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit3(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles3(arr) {
  if (Array.isArray(arr))
    return arr;
}
function Hide(props, ref) {
  var _useStyletron = useStyletron(), _useStyletron2 = _slicedToArray3(_useStyletron, 2), theme = _useStyletron2[1];
  var _props$title = props.title, title = _props$title === void 0 ? "Hide" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties4(props, _excluded4);
  var SvgOverride = mergeOverride(
    {
      component: theme.icons && theme.icons.Hide ? theme.icons.Hide : null
    },
    overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
  );
  return React4.createElement(icon_default, _extends3({
    viewBox: "0 0 20 20",
    ref,
    title,
    size,
    color,
    overrides: {
      Svg: SvgOverride
    }
  }, restProps), React4.createElement("path", {
    d: "M12.81 4.36l-1.77 1.78a4 4 0 00-4.9 4.9l-2.76 2.75C2.06 12.79.96 11.49.2 10a11 11 0 0112.6-5.64zm3.8 1.85c1.33 1 2.43 2.3 3.2 3.79a11 11 0 01-12.62 5.64l1.77-1.78a4 4 0 004.9-4.9l2.76-2.75zm-.25-3.99l1.42 1.42L3.64 17.78l-1.42-1.42L16.36 2.22z"
  }));
}
var hide_default = React4.forwardRef(Hide);

// node_modules/baseui/esm/icon/show.js
var React5 = __toESM(require_react());
var _excluded5 = ["title", "size", "color", "overrides"];
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutProperties5(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose5(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose5(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _slicedToArray4(arr, i) {
  return _arrayWithHoles4(arr) || _iterableToArrayLimit4(arr, i) || _unsupportedIterableToArray4(arr, i) || _nonIterableRest4();
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray4(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray4(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray4(o, minLen);
}
function _arrayLikeToArray4(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit4(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles4(arr) {
  if (Array.isArray(arr))
    return arr;
}
function Show(props, ref) {
  var _useStyletron = useStyletron(), _useStyletron2 = _slicedToArray4(_useStyletron, 2), theme = _useStyletron2[1];
  var _props$title = props.title, title = _props$title === void 0 ? "Show" : _props$title, size = props.size, color = props.color, _props$overrides = props.overrides, overrides = _props$overrides === void 0 ? {} : _props$overrides, restProps = _objectWithoutProperties5(props, _excluded5);
  var SvgOverride = mergeOverride(
    {
      component: theme.icons && theme.icons.Show ? theme.icons.Show : null
    },
    overrides && overrides.Svg ? toObjectOverride(overrides.Svg) : {}
  );
  return React5.createElement(icon_default, _extends4({
    viewBox: "0 0 20 20",
    ref,
    title,
    size,
    color,
    overrides: {
      Svg: SvgOverride
    }
  }, restProps), React5.createElement("path", {
    d: "M.2 10a11 11 0 0119.6 0A11 11 0 01.2 10zm9.8 4a4 4 0 100-8 4 4 0 000 8zm0-2a2 2 0 110-4 2 2 0 010 4z"
  }));
}
var show_default = React5.forwardRef(Show);

// node_modules/baseui/esm/utils/create-event.js
function createEvent(eventName) {
  var event;
  if (typeof window.Event === "function") {
    event = new window.Event(eventName, {
      bubbles: true,
      cancelable: true
    });
  } else {
    event = document.createEvent("Event");
    event.initEvent(eventName, true, true);
  }
  return event;
}

// node_modules/baseui/esm/input/base-input.js
function _typeof2(obj) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof2(obj);
}
function _extends5() {
  _extends5 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
function _slicedToArray5(arr, i) {
  return _arrayWithHoles5(arr) || _iterableToArrayLimit5(arr, i) || _unsupportedIterableToArray5(arr, i) || _nonIterableRest5();
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray5(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray5(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray5(o, minLen);
}
function _arrayLikeToArray5(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit5(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles5(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _classCallCheck2(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits2(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf2(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf2(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn2(this, result);
  };
}
function _possibleConstructorReturn2(self, call) {
  if (call && (_typeof2(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized2(self);
}
function _assertThisInitialized2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf2(o) {
  _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf2(o);
}
function _defineProperty4(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var NullComponent = function NullComponent2() {
  return null;
};
var BaseInput = function(_React$Component) {
  _inherits2(BaseInput2, _React$Component);
  var _super = _createSuper2(BaseInput2);
  function BaseInput2() {
    var _this;
    _classCallCheck2(this, BaseInput2);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty4(_assertThisInitialized2(_this), "inputRef", _this.props.inputRef || React6.createRef());
    _defineProperty4(_assertThisInitialized2(_this), "state", {
      isFocused: _this.props.autoFocus || false,
      isMasked: _this.props.type === "password",
      initialType: _this.props.type,
      isFocusVisibleForClear: false,
      isFocusVisibleForMaskToggle: false
    });
    _defineProperty4(_assertThisInitialized2(_this), "onInputKeyDown", function(e) {
      if (_this.props.clearOnEscape && e.key === "Escape" && _this.inputRef.current && !_this.props.readOnly) {
        _this.clearValue();
        e.stopPropagation();
      }
    });
    _defineProperty4(_assertThisInitialized2(_this), "onClearIconClick", function() {
      if (_this.inputRef.current)
        _this.clearValue();
      if (_this.inputRef.current)
        _this.inputRef.current.focus();
    });
    _defineProperty4(_assertThisInitialized2(_this), "onFocus", function(e) {
      _this.setState({
        isFocused: true
      });
      _this.props.onFocus(e);
    });
    _defineProperty4(_assertThisInitialized2(_this), "onBlur", function(e) {
      _this.setState({
        isFocused: false
      });
      _this.props.onBlur(e);
    });
    _defineProperty4(_assertThisInitialized2(_this), "handleFocusForMaskToggle", function(event) {
      if (isFocusVisible(event)) {
        _this.setState({
          isFocusVisibleForMaskToggle: true
        });
      }
    });
    _defineProperty4(_assertThisInitialized2(_this), "handleBlurForMaskToggle", function(event) {
      if (_this.state.isFocusVisibleForMaskToggle !== false) {
        _this.setState({
          isFocusVisibleForMaskToggle: false
        });
      }
    });
    _defineProperty4(_assertThisInitialized2(_this), "handleFocusForClear", function(event) {
      if (isFocusVisible(event)) {
        _this.setState({
          isFocusVisibleForClear: true
        });
      }
    });
    _defineProperty4(_assertThisInitialized2(_this), "handleBlurForClear", function(event) {
      if (_this.state.isFocusVisibleForClear !== false) {
        _this.setState({
          isFocusVisibleForClear: false
        });
      }
    });
    return _this;
  }
  _createClass2(BaseInput2, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props, autoFocus = _this$props.autoFocus, clearable = _this$props.clearable;
      if (this.inputRef.current) {
        if (autoFocus) {
          this.inputRef.current.focus();
        }
        if (clearable) {
          this.inputRef.current.addEventListener("keydown", this.onInputKeyDown);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var clearable = this.props.clearable;
      if (clearable && this.inputRef.current) {
        this.inputRef.current.removeEventListener("keydown", this.onInputKeyDown);
      }
    }
  }, {
    key: "clearValue",
    value: function clearValue() {
      var input = this.inputRef.current;
      if (input) {
        var nativeInputValue = Object.getOwnPropertyDescriptor(this.props.type === CUSTOM_INPUT_TYPE.textarea ? HTMLTextAreaElement.prototype : HTMLInputElement.prototype, "value");
        if (nativeInputValue) {
          var nativeInputValueSetter = nativeInputValue.set;
          if (nativeInputValueSetter) {
            nativeInputValueSetter.call(input, "");
            var event = createEvent("input");
            input.dispatchEvent(event);
          }
        }
      }
    }
  }, {
    key: "getInputType",
    value: function getInputType() {
      if (this.props.type === "password") {
        return this.state.isMasked ? "password" : "text";
      } else {
        return this.props.type;
      }
    }
  }, {
    key: "renderMaskToggle",
    value: function renderMaskToggle() {
      var _SIZE$mini$SIZE$compa, _this2 = this;
      if (this.props.type !== "password")
        return null;
      var _getOverrides = getOverrides(this.props.overrides.MaskToggleButton, StyledMaskToggleButton), _getOverrides2 = _slicedToArray5(_getOverrides, 2), MaskToggleButton = _getOverrides2[0], maskToggleButtonProps = _getOverrides2[1];
      var _getOverrides3 = getOverrides(this.props.overrides.MaskToggleShowIcon, show_default), _getOverrides4 = _slicedToArray5(_getOverrides3, 2), MaskToggleShowIcon = _getOverrides4[0], maskToggleIconShowProps = _getOverrides4[1];
      var _getOverrides5 = getOverrides(this.props.overrides.MaskToggleHideIcon, hide_default), _getOverrides6 = _slicedToArray5(_getOverrides5, 2), MaskToggleHideIcon = _getOverrides6[0], maskToggleIconHideProps = _getOverrides6[1];
      var label = this.state.isMasked ? "Show password text" : "Hide password text";
      var iconSize = (_SIZE$mini$SIZE$compa = {}, _defineProperty4(_SIZE$mini$SIZE$compa, SIZE.mini, "12px"), _defineProperty4(_SIZE$mini$SIZE$compa, SIZE.compact, "16px"), _defineProperty4(_SIZE$mini$SIZE$compa, SIZE.default, "20px"), _defineProperty4(_SIZE$mini$SIZE$compa, SIZE.large, "24px"), _SIZE$mini$SIZE$compa)[this.props.size];
      return React6.createElement(MaskToggleButton, _extends5({
        $size: this.props.size,
        $isFocusVisible: this.state.isFocusVisibleForMaskToggle,
        "aria-label": label,
        onClick: function onClick() {
          return _this2.setState(function(state) {
            return {
              isMasked: !state.isMasked
            };
          });
        },
        title: label,
        type: "button"
      }, maskToggleButtonProps, {
        onFocus: forkFocus(maskToggleButtonProps, this.handleFocusForMaskToggle),
        onBlur: forkBlur(maskToggleButtonProps, this.handleBlurForMaskToggle)
      }), this.state.isMasked ? React6.createElement(MaskToggleShowIcon, _extends5({
        size: iconSize,
        title: label
      }, maskToggleIconShowProps)) : React6.createElement(MaskToggleHideIcon, _extends5({
        size: iconSize,
        title: label
      }, maskToggleIconHideProps)));
    }
  }, {
    key: "renderClear",
    value: function renderClear() {
      var _SIZE$mini$SIZE$compa2, _this3 = this;
      var _this$props2 = this.props, clearable = _this$props2.clearable, value = _this$props2.value, disabled = _this$props2.disabled, readOnly = _this$props2.readOnly, _this$props2$override = _this$props2.overrides, overrides = _this$props2$override === void 0 ? {} : _this$props2$override;
      if (disabled || readOnly || !clearable || value == null || typeof value === "string" && value.length === 0) {
        return null;
      }
      var _getOverrides7 = getOverrides(overrides.ClearIconContainer, StyledClearIconContainer), _getOverrides8 = _slicedToArray5(_getOverrides7, 2), ClearIconContainer = _getOverrides8[0], clearIconContainerProps = _getOverrides8[1];
      var _getOverrides9 = getOverrides(overrides.ClearIcon, StyledClearIcon), _getOverrides10 = _slicedToArray5(_getOverrides9, 2), ClearIcon = _getOverrides10[0], clearIconProps = _getOverrides10[1];
      var ariaLabel = "Clear value";
      var sharedProps = getSharedProps(this.props, this.state);
      var iconSize = (_SIZE$mini$SIZE$compa2 = {}, _defineProperty4(_SIZE$mini$SIZE$compa2, SIZE.mini, "14px"), _defineProperty4(_SIZE$mini$SIZE$compa2, SIZE.compact, "14px"), _defineProperty4(_SIZE$mini$SIZE$compa2, SIZE.default, "16px"), _defineProperty4(_SIZE$mini$SIZE$compa2, SIZE.large, "22px"), _SIZE$mini$SIZE$compa2)[this.props.size];
      return React6.createElement(ClearIconContainer, _extends5({
        $alignTop: this.props.type === CUSTOM_INPUT_TYPE.textarea
      }, sharedProps, clearIconContainerProps), React6.createElement(ClearIcon, _extends5({
        size: iconSize,
        tabIndex: 0,
        title: ariaLabel,
        "aria-label": ariaLabel,
        onClick: this.onClearIconClick,
        onKeyDown: function onKeyDown2(event) {
          if (event.key && (event.key === "Enter" || event.key === " ")) {
            event.preventDefault();
            _this3.onClearIconClick();
          }
        },
        role: "button",
        $isFocusVisible: this.state.isFocusVisibleForClear
      }, sharedProps, clearIconProps, {
        onFocus: forkFocus(clearIconProps, this.handleFocusForClear),
        onBlur: forkBlur(clearIconProps, this.handleBlurForClear)
      })));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$overrides = this.props.overrides, InputContainerOverride = _this$props$overrides.InputContainer, InputOverride = _this$props$overrides.Input, BeforeOverride = _this$props$overrides.Before, AfterOverride = _this$props$overrides.After;
      var autoComplete = this.state.initialType === "password" && this.props.autoComplete === BaseInput2.defaultProps.autoComplete ? "new-password" : this.props.autoComplete;
      var sharedProps = getSharedProps(this.props, this.state);
      var _getOverrides11 = getOverrides(InputContainerOverride, InputContainer), _getOverrides12 = _slicedToArray5(_getOverrides11, 2), InputContainer2 = _getOverrides12[0], inputContainerProps = _getOverrides12[1];
      var _getOverrides13 = getOverrides(InputOverride, Input), _getOverrides14 = _slicedToArray5(_getOverrides13, 2), Input3 = _getOverrides14[0], inputProps = _getOverrides14[1];
      var _getOverrides15 = getOverrides(BeforeOverride, NullComponent), _getOverrides16 = _slicedToArray5(_getOverrides15, 2), Before = _getOverrides16[0], beforeProps = _getOverrides16[1];
      var _getOverrides17 = getOverrides(AfterOverride, NullComponent), _getOverrides18 = _slicedToArray5(_getOverrides17, 2), After = _getOverrides18[0], afterProps = _getOverrides18[1];
      return React6.createElement(InputContainer2, _extends5({
        "data-baseweb": this.props["data-baseweb"] || "base-input"
      }, sharedProps, inputContainerProps), React6.createElement(Before, _extends5({}, sharedProps, beforeProps)), React6.createElement(Input3, _extends5({
        ref: this.inputRef,
        "aria-activedescendant": this.props["aria-activedescendant"],
        "aria-autocomplete": this.props["aria-autocomplete"],
        "aria-controls": this.props["aria-controls"],
        "aria-errormessage": this.props["aria-errormessage"],
        "aria-haspopup": this.props["aria-haspopup"],
        "aria-label": this.props["aria-label"],
        "aria-labelledby": this.props["aria-labelledby"],
        "aria-describedby": this.props["aria-describedby"],
        "aria-invalid": this.props.error,
        "aria-required": this.props.required,
        autoComplete,
        disabled: this.props.disabled,
        readOnly: this.props.readOnly,
        id: this.props.id,
        inputMode: this.props.inputMode,
        maxLength: this.props.maxLength,
        name: this.props.name,
        onBlur: this.onBlur,
        onChange: this.props.onChange,
        onFocus: this.onFocus,
        onKeyDown: this.props.onKeyDown,
        onKeyPress: this.props.onKeyPress,
        onKeyUp: this.props.onKeyUp,
        pattern: this.props.pattern,
        placeholder: this.props.placeholder,
        type: this.getInputType(),
        required: this.props.required,
        role: this.props.role,
        value: this.props.value,
        min: this.props.min,
        max: this.props.max,
        step: this.props.step,
        rows: this.props.type === CUSTOM_INPUT_TYPE.textarea ? this.props.rows : null
      }, sharedProps, inputProps)), this.renderClear(), this.renderMaskToggle(), React6.createElement(After, _extends5({}, sharedProps, afterProps)));
    }
  }]);
  return BaseInput2;
}(React6.Component);
_defineProperty4(BaseInput, "defaultProps", {
  "aria-activedescendant": null,
  "aria-autocomplete": null,
  "aria-controls": null,
  "aria-errormessage": null,
  "aria-haspopup": null,
  "aria-label": null,
  "aria-labelledby": null,
  "aria-describedby": null,
  adjoined: ADJOINED.none,
  autoComplete: "on",
  autoFocus: false,
  disabled: false,
  error: false,
  positive: false,
  name: "",
  inputMode: "text",
  onBlur: function onBlur() {
  },
  onChange: function onChange2() {
  },
  onKeyDown: function onKeyDown() {
  },
  onKeyPress: function onKeyPress() {
  },
  onKeyUp: function onKeyUp() {
  },
  onFocus: function onFocus() {
  },
  onClear: function onClear2() {
  },
  clearable: false,
  clearOnEscape: true,
  overrides: {},
  pattern: null,
  placeholder: "",
  required: false,
  role: null,
  size: SIZE.default,
  type: "text",
  readOnly: false
});
var base_input_default = BaseInput;

// node_modules/baseui/esm/input/input.js
var React7 = __toESM(require_react());
function _typeof3(obj) {
  "@babel/helpers - typeof";
  return _typeof3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof3(obj);
}
var _excluded6 = ["Root", "StartEnhancer", "EndEnhancer"];
var _excluded22 = ["startEnhancer", "endEnhancer", "overrides"];
function _extends6() {
  _extends6 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function _slicedToArray6(arr, i) {
  return _arrayWithHoles6(arr) || _iterableToArrayLimit6(arr, i) || _unsupportedIterableToArray6(arr, i) || _nonIterableRest6();
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray6(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray6(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray6(o, minLen);
}
function _arrayLikeToArray6(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit6(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles6(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _objectWithoutProperties6(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose6(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose6(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _classCallCheck3(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties3(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass3(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties3(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties3(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", { writable: false });
  return Constructor;
}
function _inherits3(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
  Object.defineProperty(subClass, "prototype", { writable: false });
  if (superClass)
    _setPrototypeOf3(subClass, superClass);
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf4(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf3(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf3(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn3(this, result);
  };
}
function _possibleConstructorReturn3(self, call) {
  if (call && (_typeof3(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized3(self);
}
function _assertThisInitialized3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _getPrototypeOf3(o) {
  _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf4(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf3(o);
}
function _defineProperty5(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
var Input2 = function(_React$Component) {
  _inherits3(Input3, _React$Component);
  var _super = _createSuper3(Input3);
  function Input3() {
    var _this;
    _classCallCheck3(this, Input3);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty5(_assertThisInitialized3(_this), "state", {
      isFocused: _this.props.autoFocus || false
    });
    _defineProperty5(_assertThisInitialized3(_this), "onFocus", function(e) {
      _this.setState({
        isFocused: true
      });
      _this.props.onFocus(e);
    });
    _defineProperty5(_assertThisInitialized3(_this), "onBlur", function(e) {
      _this.setState({
        isFocused: false
      });
      _this.props.onBlur(e);
    });
    return _this;
  }
  _createClass3(Input3, [{
    key: "render",
    value: function render() {
      var _this$props = this.props, startEnhancer = _this$props.startEnhancer, endEnhancer = _this$props.endEnhancer, _this$props$overrides = _this$props.overrides, RootOverride = _this$props$overrides.Root, StartEnhancerOverride = _this$props$overrides.StartEnhancer, EndEnhancerOverride = _this$props$overrides.EndEnhancer, restOverrides = _objectWithoutProperties6(_this$props$overrides, _excluded6), restProps = _objectWithoutProperties6(_this$props, _excluded22);
      var _getOverrides = getOverrides(RootOverride, Root), _getOverrides2 = _slicedToArray6(_getOverrides, 2), Root2 = _getOverrides2[0], rootProps = _getOverrides2[1];
      var _getOverrides3 = getOverrides(StartEnhancerOverride, InputEnhancer), _getOverrides4 = _slicedToArray6(_getOverrides3, 2), StartEnhancer = _getOverrides4[0], startEnhancerProps = _getOverrides4[1];
      var _getOverrides5 = getOverrides(EndEnhancerOverride, InputEnhancer), _getOverrides6 = _slicedToArray6(_getOverrides5, 2), EndEnhancer = _getOverrides6[0], endEnhancerProps = _getOverrides6[1];
      var sharedProps = getSharedProps(this.props, this.state);
      if (true) {
        if (this.props.error && this.props.positive) {
          console.warn("[Input] `error` and `positive` are both set to `true`. `error` will take precedence but this may not be what you want.");
        }
      }
      return React7.createElement(Root2, _extends6({
        "data-baseweb": "input"
      }, sharedProps, rootProps, {
        $adjoined: getAdjoinedProp(startEnhancer, endEnhancer),
        $hasIconTrailing: this.props.clearable || this.props.type == "password"
      }), isEnhancer(startEnhancer) && React7.createElement(StartEnhancer, _extends6({}, sharedProps, startEnhancerProps, {
        $position: ENHANCER_POSITION.start
      }), typeof startEnhancer === "function" ? startEnhancer(sharedProps) : startEnhancer), React7.createElement(base_input_default, _extends6({}, restProps, {
        overrides: restOverrides,
        adjoined: getAdjoinedProp(startEnhancer, endEnhancer),
        onFocus: this.onFocus,
        onBlur: this.onBlur
      })), isEnhancer(endEnhancer) && React7.createElement(EndEnhancer, _extends6({}, sharedProps, endEnhancerProps, {
        $position: ENHANCER_POSITION.end
      }), typeof endEnhancer === "function" ? endEnhancer(sharedProps) : endEnhancer));
    }
  }]);
  return Input3;
}(React7.Component);
_defineProperty5(Input2, "defaultProps", {
  autoComplete: "on",
  autoFocus: false,
  disabled: false,
  name: "",
  onBlur: function onBlur2() {
  },
  onFocus: function onFocus2() {
  },
  overrides: {},
  required: false,
  size: SIZE.default,
  startEnhancer: null,
  endEnhancer: null,
  clearable: false,
  type: "text",
  readOnly: false
});
function getAdjoinedProp(startEnhancer, endEnhancer) {
  if (isEnhancer(startEnhancer) && isEnhancer(endEnhancer)) {
    return ADJOINED.both;
  } else if (isEnhancer(startEnhancer)) {
    return ADJOINED.left;
  } else if (isEnhancer(endEnhancer)) {
    return ADJOINED.right;
  }
  return ADJOINED.none;
}
function isEnhancer(enhancer) {
  return Boolean(enhancer || enhancer === 0);
}
var input_default = Input2;

// node_modules/baseui/esm/input/stateful-input.js
var React8 = __toESM(require_react());
function StatefulInput(props) {
  return React8.createElement(stateful_container_default, props, function(childrenProps) {
    return React8.createElement(input_default, childrenProps);
  });
}

// node_modules/baseui/esm/input/masked-input.js
var React9 = __toESM(require_react());
var import_react_input_mask = __toESM(require_react_input_mask());
var _excluded7 = ["startEnhancer", "endEnhancer", "error", "positive", "onChange", "onFocus", "onBlur", "value", "disabled", "readOnly"];
var _excluded23 = ["Input"];
var _excluded32 = ["mask", "maskChar", "overrides"];
function ownKeys4(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread4(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys4(Object(source), true).forEach(function(key) {
      _defineProperty6(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys4(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty6(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _typeof4(obj) {
  "@babel/helpers - typeof";
  return _typeof4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof4(obj);
}
function _extends7() {
  _extends7 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends7.apply(this, arguments);
}
function _objectWithoutProperties7(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose7(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose7(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var MaskOverride = React9.forwardRef(function(_ref, ref) {
  var startEnhancer = _ref.startEnhancer, endEnhancer = _ref.endEnhancer, error = _ref.error, positive = _ref.positive, onChange3 = _ref.onChange, onFocus3 = _ref.onFocus, onBlur3 = _ref.onBlur, value = _ref.value, disabled = _ref.disabled, readOnly = _ref.readOnly, restProps = _objectWithoutProperties7(_ref, _excluded7);
  return React9.createElement(import_react_input_mask.default, _extends7({
    onChange: onChange3,
    onFocus: onFocus3,
    onBlur: onBlur3,
    value,
    disabled,
    readOnly
  }, restProps), function(props) {
    return React9.createElement(Input, _extends7({
      ref,
      onChange: onChange3,
      onFocus: onFocus3,
      onBlur: onBlur3,
      value,
      disabled,
      readOnly
    }, props));
  });
});
MaskOverride.displayName = "MaskOverride";
function MaskedInput(_ref2) {
  var mask = _ref2.mask, maskChar = _ref2.maskChar, _ref2$overrides = _ref2.overrides;
  _ref2$overrides = _ref2$overrides === void 0 ? {} : _ref2$overrides;
  var _ref2$overrides$Input = _ref2$overrides.Input, inputOverride = _ref2$overrides$Input === void 0 ? {} : _ref2$overrides$Input, restOverrides = _objectWithoutProperties7(_ref2$overrides, _excluded23), restProps = _objectWithoutProperties7(_ref2, _excluded32);
  var componentOverride = MaskOverride;
  var propsOverride = {};
  var styleOverride = {};
  if (typeof inputOverride === "function") {
    componentOverride = inputOverride;
  } else if (_typeof4(inputOverride) === "object") {
    componentOverride = inputOverride.component || componentOverride;
    propsOverride = inputOverride.props || {};
    styleOverride = inputOverride.style || {};
  }
  if (_typeof4(propsOverride) === "object") {
    propsOverride = _objectSpread4(_objectSpread4({}, propsOverride), {}, {
      mask: propsOverride.mask || mask,
      maskChar: propsOverride.maskChar || maskChar
    });
  }
  var nextOverrides = _objectSpread4({
    Input: {
      component: componentOverride,
      props: propsOverride,
      style: styleOverride
    }
  }, restOverrides);
  return React9.createElement(input_default, _extends7({}, restProps, {
    overrides: nextOverrides
  }));
}
MaskedInput.defaultProps = {
  maskChar: " "
};

export {
  STATE_CHANGE_TYPE,
  CUSTOM_INPUT_TYPE,
  ADJOINED,
  SIZE,
  stateful_container_default,
  icon_default,
  delete_alt_default,
  Root,
  InputEnhancer,
  InputContainer,
  Input,
  base_input_default,
  input_default,
  StatefulInput,
  MaskedInput
};
//# sourceMappingURL=chunk-JYZY5HBS.js.map
