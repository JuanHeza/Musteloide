import {
  getMediaQueries,
  getOverrides,
  styled
} from "./chunk-RR725WED.js";
import {
  require_react
} from "./chunk-IGOAJGOA.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/baseui/esm/block/block.js
var React = __toESM(require_react());

// node_modules/baseui/esm/block/styled-components.js
function constrainToNull(value) {
  if (value === void 0) {
    return null;
  }
  return value;
}
function build(breakpoints) {
  var styles = {};
  var mediaQueries = getMediaQueries(breakpoints);
  return {
    apply: function apply(_ref) {
      var property = _ref.property, _ref$transform = _ref.transform, transform = _ref$transform === void 0 ? function(x) {
        return x;
      } : _ref$transform, value = _ref.value;
      if (value === null || value === void 0) {
        return;
      }
      if (Array.isArray(value)) {
        value.forEach(function(v, index) {
          if (index === 0) {
            styles[property] = constrainToNull(transform(v));
            return;
          }
          var mediaQuery = mediaQueries[index - 1];
          if (!styles[mediaQuery]) {
            styles[mediaQuery] = {};
          }
          styles[mediaQuery][property] = constrainToNull(transform(v));
        });
      } else {
        styles[property] = constrainToNull(transform(value));
      }
    },
    value: function value() {
      return styles;
    }
  };
}
function getFontValue(obj, key) {
  if (!obj)
    return;
  return obj[key];
}
var StyledBlock = styled("div", function(props) {
  var _props$$theme = props.$theme, breakpoints = _props$$theme.breakpoints, colors = _props$$theme.colors, typography = _props$$theme.typography, sizing = _props$$theme.sizing;
  var get = function get2(obj, key) {
    return obj[key];
  };
  var getScale = function getScale2(size) {
    return sizing[size] || size;
  };
  var styles = build(breakpoints);
  styles.apply({
    property: "color",
    value: get(props, "$color"),
    transform: function transform(color) {
      return colors[color] || color;
    }
  });
  styles.apply({
    property: "backgroundAttachment",
    value: get(props, "$backgroundAttachment")
  });
  styles.apply({
    property: "backgroundClip",
    value: get(props, "$backgroundClip")
  });
  styles.apply({
    property: "backgroundColor",
    value: get(props, "$backgroundColor"),
    transform: function transform(backgroundColor) {
      return colors[backgroundColor] || backgroundColor;
    }
  });
  styles.apply({
    property: "backgroundImage",
    value: get(props, "$backgroundImage")
  });
  styles.apply({
    property: "backgroundOrigin",
    value: get(props, "$backgroundOrigin")
  });
  styles.apply({
    property: "backgroundPosition",
    value: get(props, "$backgroundPosition")
  });
  styles.apply({
    property: "backgroundRepeat",
    value: get(props, "$backgroundRepeat")
  });
  styles.apply({
    property: "backgroundSize",
    value: get(props, "$backgroundSize")
  });
  styles.apply({
    property: "fontFamily",
    value: get(props, "$font"),
    transform: function transform(font) {
      return getFontValue(typography[font], "fontFamily");
    }
  });
  styles.apply({
    property: "fontWeight",
    value: get(props, "$font"),
    transform: function transform(font) {
      return getFontValue(typography[font], "fontWeight");
    }
  });
  styles.apply({
    property: "fontSize",
    value: get(props, "$font"),
    transform: function transform(font) {
      return getFontValue(typography[font], "fontSize");
    }
  });
  styles.apply({
    property: "lineHeight",
    value: get(props, "$font"),
    transform: function transform(font) {
      return getFontValue(typography[font], "lineHeight");
    }
  });
  styles.apply({
    property: "alignContent",
    value: get(props, "$alignContent")
  });
  styles.apply({
    property: "alignItems",
    value: get(props, "$alignItems")
  });
  styles.apply({
    property: "alignSelf",
    value: get(props, "$alignSelf")
  });
  styles.apply({
    property: "display",
    value: get(props, "$display")
  });
  styles.apply({
    property: "flex",
    value: get(props, "$flex")
  });
  styles.apply({
    property: "flexDirection",
    value: get(props, "$flexDirection")
  });
  styles.apply({
    property: "grid",
    value: get(props, "$grid")
  });
  styles.apply({
    property: "gridArea",
    value: get(props, "$gridArea")
  });
  styles.apply({
    property: "gridAutoColumns",
    value: get(props, "$gridAutoColumns")
  });
  styles.apply({
    property: "gridAutoFlow",
    value: get(props, "$gridAutoFlow")
  });
  styles.apply({
    property: "gridAutoRows",
    value: get(props, "$gridAutoRows")
  });
  styles.apply({
    property: "gridColumn",
    value: get(props, "$gridColumn")
  });
  styles.apply({
    property: "gridColumnEnd",
    value: get(props, "$gridColumnEnd")
  });
  styles.apply({
    property: "gridColumnGap",
    value: get(props, "$gridColumnGap"),
    transform: getScale
  });
  styles.apply({
    property: "gridColumnStart",
    value: get(props, "$gridColumnStart")
  });
  styles.apply({
    property: "gridGap",
    value: get(props, "$gridGap"),
    transform: getScale
  });
  styles.apply({
    property: "gridRow",
    value: get(props, "$gridRow")
  });
  styles.apply({
    property: "gridRowEnd",
    value: get(props, "$gridRowEnd")
  });
  styles.apply({
    property: "gridRowGap",
    value: get(props, "$gridRowGap"),
    transform: getScale
  });
  styles.apply({
    property: "gridRowStart",
    value: get(props, "$gridRowStart")
  });
  styles.apply({
    property: "gridTemplate",
    value: get(props, "$gridTemplate")
  });
  styles.apply({
    property: "gridTemplateAreas",
    value: get(props, "$gridTemplateAreas")
  });
  styles.apply({
    property: "gridTemplateColumns",
    value: get(props, "$gridTemplateColumns")
  });
  styles.apply({
    property: "gridTemplateRows",
    value: get(props, "$gridTemplateRows")
  });
  styles.apply({
    property: "justifyContent",
    value: get(props, "$justifyContent")
  });
  styles.apply({
    property: "justifyItems",
    value: get(props, "$justifyItems")
  });
  styles.apply({
    property: "justifySelf",
    value: get(props, "$justifySelf")
  });
  styles.apply({
    property: "position",
    value: get(props, "$position")
  });
  styles.apply({
    property: "width",
    value: get(props, "$width"),
    transform: getScale
  });
  styles.apply({
    property: "minWidth",
    value: get(props, "$minWidth"),
    transform: getScale
  });
  styles.apply({
    property: "maxWidth",
    value: get(props, "$maxWidth"),
    transform: getScale
  });
  styles.apply({
    property: "height",
    value: get(props, "$height"),
    transform: getScale
  });
  styles.apply({
    property: "minHeight",
    value: get(props, "$minHeight"),
    transform: getScale
  });
  styles.apply({
    property: "maxHeight",
    value: get(props, "$maxHeight"),
    transform: getScale
  });
  styles.apply({
    property: "overflowX",
    value: get(props, "$overflow"),
    transform: function transform(overflow) {
      if (overflow === "scrollX") {
        return "scroll";
      }
      return null;
    }
  });
  styles.apply({
    property: "overflowY",
    value: get(props, "$overflow"),
    transform: function transform(overflow) {
      if (overflow === "scrollY") {
        return "scroll";
      }
      return null;
    }
  });
  styles.apply({
    property: "overflow",
    value: get(props, "$overflow"),
    transform: function transform(overflow) {
      if (overflow !== "scrollX" && overflow !== "scrollY") {
        return overflow;
      }
      return null;
    }
  });
  styles.apply({
    property: "margin",
    value: get(props, "$margin"),
    transform: getScale
  });
  styles.apply({
    property: "marginTop",
    value: get(props, "$marginTop"),
    transform: getScale
  });
  styles.apply({
    property: "marginRight",
    value: get(props, "$marginRight"),
    transform: getScale
  });
  styles.apply({
    property: "marginBottom",
    value: get(props, "$marginBottom"),
    transform: getScale
  });
  styles.apply({
    property: "marginLeft",
    value: get(props, "$marginLeft"),
    transform: getScale
  });
  styles.apply({
    property: "padding",
    value: get(props, "$padding"),
    transform: getScale
  });
  styles.apply({
    property: "paddingTop",
    value: get(props, "$paddingTop"),
    transform: getScale
  });
  styles.apply({
    property: "paddingRight",
    value: get(props, "$paddingRight"),
    transform: getScale
  });
  styles.apply({
    property: "paddingBottom",
    value: get(props, "$paddingBottom"),
    transform: getScale
  });
  styles.apply({
    property: "paddingLeft",
    value: get(props, "$paddingLeft"),
    transform: getScale
  });
  styles.apply({
    property: "placeContent",
    value: get(props, "$placeContent")
  });
  styles.apply({
    property: "placeItems",
    value: get(props, "$placeItems")
  });
  styles.apply({
    property: "placeSelf",
    value: get(props, "$placeSelf")
  });
  styles.apply({
    property: "flexWrap",
    value: get(props, "$flexWrap"),
    transform: function transform() {
      return "wrap";
    }
  });
  styles.apply({
    property: "top",
    value: get(props, "$top"),
    transform: getScale
  });
  styles.apply({
    property: "right",
    value: get(props, "$right"),
    transform: getScale
  });
  styles.apply({
    property: "left",
    value: get(props, "$left"),
    transform: getScale
  });
  styles.apply({
    property: "bottom",
    value: get(props, "$bottom"),
    transform: getScale
  });
  styles.apply({
    property: "textOverflow",
    value: get(props, "$textOverflow")
  });
  styles.apply({
    property: "whiteSpace",
    value: get(props, "$whiteSpace")
  });
  return styles.value();
});
StyledBlock.displayName = "StyledBlock";
StyledBlock.displayName = "StyledBlock";

// node_modules/baseui/esm/block/block.js
var _excluded = ["forwardedRef", "children", "as", "overrides", "color", "backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPosition", "backgroundRepeat", "backgroundSize", "font", "alignContent", "alignItems", "alignSelf", "flexDirection", "display", "flex", "grid", "gridArea", "gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridColumn", "gridColumnEnd", "gridColumnGap", "gridColumnStart", "gridGap", "gridRow", "gridRowEnd", "gridRowGap", "gridRowStart", "gridTemplate", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows", "justifyContent", "justifyItems", "justifySelf", "position", "width", "minWidth", "maxWidth", "height", "minHeight", "maxHeight", "overflow", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "placeContent", "placeItems", "placeSelf", "flexWrap", "left", "top", "right", "bottom", "textOverflow", "whiteSpace"];
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var Block = function Block2(_ref) {
  var forwardedRef = _ref.forwardedRef, children = _ref.children, _ref$as = _ref.as, as = _ref$as === void 0 ? "div" : _ref$as, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? {} : _ref$overrides, color = _ref.color, backgroundAttachment = _ref.backgroundAttachment, backgroundClip = _ref.backgroundClip, backgroundColor = _ref.backgroundColor, backgroundImage = _ref.backgroundImage, backgroundOrigin = _ref.backgroundOrigin, backgroundPosition = _ref.backgroundPosition, backgroundRepeat = _ref.backgroundRepeat, backgroundSize = _ref.backgroundSize, font = _ref.font, alignContent = _ref.alignContent, alignItems = _ref.alignItems, alignSelf = _ref.alignSelf, flexDirection = _ref.flexDirection, display = _ref.display, flex = _ref.flex, grid = _ref.grid, gridArea = _ref.gridArea, gridAutoColumns = _ref.gridAutoColumns, gridAutoFlow = _ref.gridAutoFlow, gridAutoRows = _ref.gridAutoRows, gridColumn = _ref.gridColumn, gridColumnEnd = _ref.gridColumnEnd, gridColumnGap = _ref.gridColumnGap, gridColumnStart = _ref.gridColumnStart, gridGap = _ref.gridGap, gridRow = _ref.gridRow, gridRowEnd = _ref.gridRowEnd, gridRowGap = _ref.gridRowGap, gridRowStart = _ref.gridRowStart, gridTemplate = _ref.gridTemplate, gridTemplateAreas = _ref.gridTemplateAreas, gridTemplateColumns = _ref.gridTemplateColumns, gridTemplateRows = _ref.gridTemplateRows, justifyContent = _ref.justifyContent, justifyItems = _ref.justifyItems, justifySelf = _ref.justifySelf, position = _ref.position, width = _ref.width, minWidth = _ref.minWidth, maxWidth = _ref.maxWidth, height = _ref.height, minHeight = _ref.minHeight, maxHeight = _ref.maxHeight, overflow = _ref.overflow, margin = _ref.margin, marginTop = _ref.marginTop, marginRight = _ref.marginRight, marginBottom = _ref.marginBottom, marginLeft = _ref.marginLeft, padding = _ref.padding, paddingTop = _ref.paddingTop, paddingRight = _ref.paddingRight, paddingBottom = _ref.paddingBottom, paddingLeft = _ref.paddingLeft, placeContent = _ref.placeContent, placeItems = _ref.placeItems, placeSelf = _ref.placeSelf, flexWrap = _ref.flexWrap, left = _ref.left, top = _ref.top, right = _ref.right, bottom = _ref.bottom, textOverflow = _ref.textOverflow, whiteSpace = _ref.whiteSpace, restProps = _objectWithoutProperties(_ref, _excluded);
  var _getOverrides = getOverrides(overrides.Block, StyledBlock), _getOverrides2 = _slicedToArray(_getOverrides, 2), BaseBlock = _getOverrides2[0], baseBlockProps = _getOverrides2[1];
  return React.createElement(
    BaseBlock,
    _extends({
      ref: forwardedRef,
      $as: as,
      $color: color,
      $backgroundAttachment: backgroundAttachment,
      $backgroundClip: backgroundClip,
      $backgroundColor: backgroundColor,
      $backgroundImage: backgroundImage,
      $backgroundOrigin: backgroundOrigin,
      $backgroundPosition: backgroundPosition,
      $backgroundRepeat: backgroundRepeat,
      $backgroundSize: backgroundSize,
      $font: font,
      $alignContent: alignContent,
      $alignItems: alignItems,
      $alignSelf: alignSelf,
      $flexDirection: flexDirection,
      $display: display,
      $flex: flex,
      $grid: grid,
      $gridArea: gridArea,
      $gridAutoColumns: gridAutoColumns,
      $gridAutoFlow: gridAutoFlow,
      $gridAutoRows: gridAutoRows,
      $gridColumn: gridColumn,
      $gridColumnEnd: gridColumnEnd,
      $gridColumnGap: gridColumnGap,
      $gridColumnStart: gridColumnStart,
      $gridGap: gridGap,
      $gridRow: gridRow,
      $gridRowEnd: gridRowEnd,
      $gridRowGap: gridRowGap,
      $gridRowStart: gridRowStart,
      $gridTemplate: gridTemplate,
      $gridTemplateAreas: gridTemplateAreas,
      $gridTemplateColumns: gridTemplateColumns,
      $gridTemplateRows: gridTemplateRows,
      $justifyContent: justifyContent,
      $justifyItems: justifyItems,
      $justifySelf: justifySelf,
      $position: position,
      $width: width,
      $minWidth: minWidth,
      $maxWidth: maxWidth,
      $height: height,
      $minHeight: minHeight,
      $maxHeight: maxHeight,
      $overflow: overflow,
      $margin: margin,
      $marginTop: marginTop,
      $marginRight: marginRight,
      $marginBottom: marginBottom,
      $marginLeft: marginLeft,
      $padding: padding,
      $paddingTop: paddingTop,
      $paddingRight: paddingRight,
      $paddingBottom: paddingBottom,
      $paddingLeft: paddingLeft,
      $placeContent: placeContent,
      $placeItems: placeItems,
      $placeSelf: placeSelf,
      $flexWrap: flexWrap,
      $left: left,
      $top: top,
      $right: right,
      $bottom: bottom,
      $textOverflow: textOverflow,
      $whiteSpace: whiteSpace,
      "data-baseweb": "block"
    }, restProps, baseBlockProps),
    children
  );
};
var BlockComponent = React.forwardRef(function(props, ref) {
  return React.createElement(Block, _extends({}, props, {
    forwardedRef: ref
  }));
});
BlockComponent.displayName = "Block";
var block_default = BlockComponent;

export {
  block_default
};
//# sourceMappingURL=chunk-3ZYHOBUL.js.map
